---
import Layout from "../../../../layouts/Layout.astro";
import {marked} from "marked";
import ExcalidrawViewer from "../../../../components/ExcalidrawViewer";
import { RepositoryViewer } from "../../../../lib/repository-viewer";

const {owner, repo, path} = Astro.params;
let sha = Astro.url.searchParams.get("sha");
let raw = Astro.url.searchParams.has("raw");

// Initialize Repository Viewer
const viewer = new RepositoryViewer(`https://github.com/${owner}/${repo}`, owner, repo, path, sha);
const res = await viewer.initialize();
if (res) {
    return res;
}

// Render HTML
const treeHtml = viewer.buildTreeHtml(viewer.tree, viewer.path);
---

<Layout title={viewer.displayName}>
    {raw? (viewer.isExcalidraw? <ExcalidrawViewer initialData={viewer.displayData} client:only="react"/> : <div class="container"><h1>{viewer.displayName}</h1><hr /><main class="container" set:html={marked(viewer.displayData)}/></div>):
            <div id="sidebar" class="container">
                <div class="top">
                    <small>{owner + "/" + repo}</small>
                </div>
                <h2>Files</h2>
                <div id="file-tree" set:html={treeHtml}/>
                <hr>
                <a href="https://github.com/PanJohnny/obsidian-online">Powered by Obsidian Online</a>
            </div>
            <main class="container">
                <div class="top">
                    <small>{path}</small>
                </div>
                <div class="heading">
                    <h1>{viewer.displayName}</h1>
                    <button id="toc" class="heading-button" title="Table of Contents"><img src="/list.svg" aria-hidden/> Table of Contents</button>
                    <a href="#sidebar" role="button" class="phone heading-button"><img src="/folder.svg" aria-hidden/> Files</a>
                    <button id="refresh" class="heading-button" title="Loads the latest version on GitHub"><img src="/refresh.svg" aria-hidden/> Latest version</button>
                </div>
                <hr/>
                {viewer.isMarkdown? <div id="content" set:html={marked(viewer.displayData)}/> : viewer.isExcalidraw ? <ExcalidrawViewer initialData={viewer.displayData} client:only="react"/> <p>Limited functionality</p> : <pre>{viewer.displayData}</pre>}
            </main>
    }
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" id="MathJax-script" async/>
    <script is:inline>
        MathJax = {
            tex: {
                inlineMath: [['$', '$']],
            },
        };

        if (document.body.animate) {
            // If yes, we add a click listener on our button
            document.querySelector('#toc').addEventListener('click', pop);
        }

        function pop (e) {
            // Quick check if user clicked the button using a keyboard
            if (e.clientX === 0 && e.clientY === 0) {
                const bbox = document.querySelector('#button').getBoundingClientRect();
                const x = bbox.left + bbox.width / 2;
                const y = bbox.top + bbox.height / 2;
                for (let i = 0; i < 30; i++) {
                    // We call the function createParticle 30 times
                    // We pass the coordinates of the button for x & y values
                    createParticle(x, y);
                }
            } else {
                for (let i = 0; i < 30; i++) {
                    // We call the function createParticle 30 times
                    // As we need the coordinates of the mouse, we pass them as arguments
                    createParticle(e.clientX, e.clientY);
                }
            }
        }

        function createParticle (x, y) {
            const particle = document.createElement('particle');
            document.body.appendChild(particle);

            // Calculate a random size from 5px to 25px
            const size = Math.floor(Math.random() * 10 + 5);
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;
            // Generate a random color in a blue/purple palette
            particle.style.background = `hsl(${Math.random() * 90 + 180}, 70%, 60%)`;

            // Generate a random x & y destination within a distance of 75px from the mouse
            const destinationX = x + (Math.random() - 0.5) * 300;
            const destinationY = y + (Math.random() - 0.5) * 300;

            // Store the animation in a variable as we will need it later
            const animation = particle.animate([
                {
                    // Set the origin position of the particle
                    // We offset the particle with half its size to center it around the mouse
                    transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,
                    opacity: 1
                },
                {
                    // We define the final coordinates as the second keyframe
                    transform: `translate(${destinationX}px, ${destinationY}px)`,
                    opacity: 0
                }
            ], {
                duration: Math.random() * 500 + 500,
                easing: 'cubic-bezier(0, .9, .57, 1)',
                delay: Math.random() * 10
            });

            // When the animation is complete, remove the element from the DOM
            animation.onfinish = () => {
                particle.remove();
            };
        }

        document.querySelectorAll("iframe").forEach((iframe) => {
            // Fit the iframe to the content
            iframe.onload = () => {
                setTimeout(() => {
                    iframe.style.height = iframe.contentWindow.document.body.scrollHeight + "px";
                }, 300);
            };
        });
    </script>
</Layout>

<style is:global>
    .top {
        position: relative;
        text-wrap: nowrap;
        overflow: hidden;
    }

    .tree {
        list-style: none;
        padding-left: 1rem;
    }

    .folder {
        padding: 3px;
    }

    .folder::before {
        content: "";
        margin-right: 5px;
        background-image: url("/folder.svg");
        background-size: contain;
        display: inline-block;
        width: 1em;
        height: 1em;
        filter: invert(1);
    }

    .file::before {
        content: "";
        margin-right: 1px;
        margin-left: 4px;
        vertical-align: baseline;
        background-image: url("/file.svg");
        background-size: contain;
        display: inline-block;
        width: 1em;
        height: 1em;
        filter: invert(1);
    }

    .folder > button {
        background: none;
        border: none;
        cursor: pointer;
    }

    .nested {
        display: none;
        padding-left: 1rem;
        border-left: 1px solid;
    }

    .folder.open > .nested {
        display: block;
    }

    body {
        display: flex;
        flex-direction: row;
    }

    #sidebar button {
        all: unset;
        cursor: default;
    }

    #sidebar {
        max-width: 30%;
    }

    @media print {
        #sidebar {
            display: none;
        }

        .noprint {
            display: none;
        }

        #toc {
            display: none;
        }
    }

    .heading-button img {
        width: 1em;
        height: 1em;
        margin-right: 0.5em;
        filter: invert(1);
        vertical-align: text-top;
    }

    .heading-button {
        padding: 0.5rem;
        background-color: unset;
        font-size: 80%;
    }

    @media screen and (max-width: 800px) {
        body {
            flex-direction: column-reverse;
        }

        #sidebar {
            max-width: unset;
        }

        .folder, .file {
            padding: 10px;
        }
    }

    @media screen and (min-width: 800px) {
        .phone {
            display: none !important;
        }
    }

    svg {
        max-height: 8em;
    }

    .container {
        flex: 1;
        padding: 2rem;
        margin: unset;
    }

    mjx-container {
        display: block;
        overflow: scroll;
    }

    @media (prefers-color-scheme: light) {
        .folder::before, .file::before, #toc img {
            filter: none !important;
        }
    }

    @keyframes expand {
        from {
            max-height: 0;
        }
        to {
            max-height: 1000px; /* Adjust as needed */
        }
    }
    #toc img {
        width: 1em;
        height: 1em;
        margin-right: 0.5em;
        filter: invert(1);
    }
    @keyframes collapse {
        from {
            max-height: 1000px; /* Adjust as needed */
        }
        to {
            max-height: 0;
        }
    }

    .folder > .nested {
        overflow: hidden;
        max-height: 0;
    }

    .folder.open > .nested {
        animation: expand 1s ease-out forwards;
    }

    .folder:not(.open) > .nested {
        animation: collapse 1s ease-out forwards;
    }

    @media (prefers-color-scheme: light) {
        .file::before {
            filter: none;
        }
    }

    details.toc {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        border: 1px solid;
    }

    details.toc summary {
        cursor: pointer;
        font-weight: bold;
        font-size: 1.2rem;
    }

    details.toc ul {
        list-style: none;
    }

    details.toc li {
        margin: 0.5rem 0;
    }

    details.toc a {
        text-decoration: none;
    }

    details.toc a:hover {
        text-decoration: underline;
    }

    details.toc[open] {
        animation: expand 1s ease-out forwards;
    }

    particle {
        position: fixed;
        left: 0;
        top: 0;
        border-radius: 50%;
        pointer-events: none;
        opacity: 0;
    }
</style>


<script>
    import {SmiDrawer} from "smiles-drawer";

    // If user clicks on a element, check the hash
    document.addEventListener("click", (event) => {
        const target = event.target;
        //@ts-ignore
        if (target.tagName === "A") {
            //@ts-ignore
            const hash = target.hash;
            if (hash) {
                const element = document.querySelector(hash);
                if (element) {
                    element.scrollIntoView();
                    event.preventDefault();
                } else if (hash === "#file-not-found") {
                    var main = document.querySelector("main");
                    if (main) {
                        main.innerHTML = "<h1>File not found</h1>";
                    }
                    location.hash = "";
                }
            }
        }
    });

    // Add id to all headings
    document.addEventListener("DOMContentLoaded", () => {
        const headings = document.querySelectorAll("h1, h2, h3, h4, h5, h6");
        headings.forEach((heading) => { //@ts-ignore
            heading.id = encodeURIComponent(heading.textContent);
        });

        const folders = document.querySelectorAll(".folder > .toggle");
        folders.forEach((button) => {
            button.addEventListener("click", () => {
                const parent = button.parentElement; //@ts-ignore
                parent.classList.toggle("open");
            });
        });
    });

    // Add Table of Contents button
    const tocButton = document.getElementById("toc");
    if (tocButton) {
        tocButton.addEventListener("click", () => {
            const toc = document.createElement("details");
            toc.classList.add("toc");
            toc.classList.add("noprint");
            toc.innerHTML = "<summary>Table of Contents</summary>";

            const tocList = document.createElement("ul");
            toc.appendChild(tocList);

            const headings = document.querySelector("main")?.querySelectorAll("h1, h2, h3, h4, h5, h6");
            headings?.forEach((heading) => {
            const level = parseInt(heading.tagName.substring(1));
            const listItem = document.createElement("li");
            listItem.style.marginLeft = `${(level - 1) * 20}px`;

            const link = document.createElement("a");
            link.href = `#${heading.id}`;
            link.textContent = heading.textContent;

            listItem.appendChild(link);
            tocList.appendChild(listItem);
            });

            toc.open = true;

            setTimeout(() => {
                tocButton.replaceWith(toc);
                toc.scrollIntoView({ behavior: "smooth" });
            }, 100);
        });
    }

    const hashCode = function(str) {
        var hash = 0,
            i, chr;
        if (str.length === 0) return hash;
        for (i = 0; i < str.length; i++) {
            chr = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }

    const refreshButton = document.getElementById("refresh");
    if (refreshButton) {
        refreshButton.addEventListener("click", () => {
            let contentElement = document.getElementById("content");
            if (contentElement) {
                // Create hash of current content
                let currentHash = hashCode(contentElement.textContent).toString(16);
                localStorage.setItem("currentHash", currentHash);
                window.location.assign(new URL(window.location.href).pathname + "?reload");
            } else {
                window.location.assign(new URL(window.location.href).pathname);
            }
        });
    }

    function showMessage(message, backgroundColor = "grey", color = "white") {
        // Displays a message to the user that will disappear after 3 seconds
        const messageElement = document.createElement("div");
        messageElement.textContent = message;
        messageElement.style.position = "fixed";
        // Center and 40 px from top
        messageElement.style.top = "40px";
        messageElement.style.left = "50%";
        messageElement.style.transform = "translateX(-50%)";
        messageElement.style.width = "fit-content";
        messageElement.style.backgroundColor = backgroundColor;
        messageElement.style.borderRadius = "12px";
        // Make border color slightly darker than background color
        messageElement.style.borderColor = `rgb(${backgroundColor.split(",").map((c) => parseInt(c) - 30).join(",")})`;
        messageElement.style.borderWidth = "2px";
        messageElement.style.borderStyle = "solid";
        messageElement.style.color = color;
        messageElement.style.textAlign = "center";
        messageElement.style.padding = "1rem";
        messageElement.style.zIndex = "1000";
        document.body.appendChild(messageElement);
        setTimeout(() => {
            messageElement.remove();
        }, 3000);
    }

    if (location.search === "?reload") {
        let currentHash = localStorage.getItem("currentHash");
        let contentElement = document.getElementById("content");
        if (contentElement && currentHash) {
            let newHash = hashCode(contentElement.textContent).toString(16);

            console.log(currentHash, newHash);
            if (currentHash == newHash) {
                showMessage("No changes on GitHub", "orange");
            } else {
                showMessage("Content updated", "green");
            }

            // Remove query string
            window.history.replaceState({}, document.title, window.location.pathname);
        }
    }

    const drawer = new SmiDrawer();

    drawer.apply(undefined, "dark");
</script>
